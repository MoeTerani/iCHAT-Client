import joinReducer from './JoinReducer';

describe('Alert reducer', () => {
  test('init reducers', () => {
    let state;
    state = joinReducer(undefined, {});

    expect(state).toEqual({
      name: '',
      socket: null,
      users: [],
      avatar: '',
      isAuthenticated: false,
    });
  });

  test('log-in reducer', () => {
    let state;
    state = joinReducer(
      {
        JoinReducer: {
          name: '',
          socket: null,
          users: [],
          avatar: '',
          isAuthenticated: false,
        },
      },
      {
        type: 'LOG_IN',
        payload: {
          name: { name: 'moeterani' },
          socket: {
            io: {
              nsps: { '/': '[CIRCULAR]' },
              subs: [{}, {}, {}, {}, {}, {}],
              opts: {
                reconnection: false,
                path: '/socket.io',
                hostname: 'localhost',
                secure: false,
                port: '5000',
              },
              _reconnection: false,
              _reconnectionAttempts: null,
              _reconnectionDelay: 1000,
              _reconnectionDelayMax: 5000,
              _randomizationFactor: 0.5,
              backoff: {
                ms: 1000,
                max: 5000,
                factor: 2,
                jitter: 0.5,
                attempts: 0,
              },
              _timeout: 20000,
              readyState: 'open',
              uri: 'http://localhost:5000',
              connecting: ['[CIRCULAR]'],
              lastPing: null,
              encoding: false,
              packetBuffer: [],
              encoder: {},
              decoder: {
                reconstructor: null,
                _callbacks: { $decoded: [null] },
              },
              autoConnect: true,
              engine: {
                secure: false,
                agent: false,
                hostname: 'localhost',
                port: '5000',
                query: {},
                upgrade: true,
                path: '/socket.io/',
                forceJSONP: false,
                jsonp: true,
                forceBase64: false,
                enablesXDR: false,
                withCredentials: true,
                timestampParam: 't',
                transports: ['polling', 'websocket'],
                transportOptions: {},
                readyState: 'open',
                writeBuffer: [],
                prevBufferLen: 0,
                policyPort: 843,
                rememberUpgrade: false,
                binaryType: null,
                perMessageDeflate: { threshold: 1024 },
                pfx: null,
                key: null,
                passphrase: null,
                cert: null,
                ca: null,
                ciphers: null,
                rejectUnauthorized: true,
                forceNode: false,
                isReactNative: false,
                id: 'VBlso7RaLpXNUwidAAAD',
                upgrades: ['websocket'],
                pingInterval: 25000,
                pingTimeout: 5000,
                pingIntervalTimer: 10,
                pingTimeoutTimer: 17,
                transport: {
                  perMessageDeflate: { threshold: 1024 },
                  usingBrowserWebSocket: true,
                  path: '/socket.io/',
                  hostname: 'localhost',
                  port: '5000',
                  secure: false,
                  query: {
                    EIO: 3,
                    transport: 'websocket',
                    sid: 'VBlso7RaLpXNUwidAAAD',
                  },
                  timestampParam: 't',
                  readyState: 'open',
                  agent: false,
                  socket: '[CIRCULAR]',
                  enablesXDR: false,
                  withCredentials: true,
                  pfx: null,
                  key: null,
                  passphrase: null,
                  cert: null,
                  ca: null,
                  ciphers: null,
                  rejectUnauthorized: true,
                  forceNode: false,
                  isReactNative: false,
                  _callbacks: {
                    $drain: [null],
                    $packet: [null],
                    $error: [null],
                    $close: [null],
                  },
                  ws: {},
                  writable: true,
                },
                _callbacks: {
                  $data: [null],
                  $ping: [null],
                  $pong: [null],
                  $error: [null],
                  $close: [null],
                  $heartbeat: [null],
                },
                upgrading: false,
              },
              skipReconnect: false,
              _callbacks: { $open: [null], $packet: [null], $close: [null] },
            },
            nsp: '/',
            json: '[CIRCULAR]',
            ids: 1,
            acks: {},
            receiveBuffer: [],
            sendBuffer: [],
            connected: true,
            disconnected: false,
            flags: {},
            subs: [{}, {}, {}],
            _callbacks: {
              $connecting: [null],
              $connect: [null],
              '$successful-connection': [null],
              $message: [null],
              $activeUsers: [null],
              $timeOut: [null],
              $login_error: [null],
              $connect_error: [null],
              $disconnect: [null],
            },
            id: 'VBlso7RaLpXNUwidAAAD',
          },
          avatar: 'https://avatars0.githubusercontent.com/u/45799313?v=4',
        },
      }
    );
    expect(state).toEqual({
      JoinReducer: {
        name: '',
        socket: null,
        users: [],
        avatar: '',
        isAuthenticated: false,
      },
      name: { name: 'moeterani' },
      socket: {
        io: {
          nsps: { '/': '[CIRCULAR]' },
          subs: [{}, {}, {}, {}, {}, {}],
          opts: {
            reconnection: false,
            path: '/socket.io',
            hostname: 'localhost',
            secure: false,
            port: '5000',
          },
          _reconnection: false,
          _reconnectionAttempts: null,
          _reconnectionDelay: 1000,
          _reconnectionDelayMax: 5000,
          _randomizationFactor: 0.5,
          backoff: {
            ms: 1000,
            max: 5000,
            factor: 2,
            jitter: 0.5,
            attempts: 0,
          },
          _timeout: 20000,
          readyState: 'open',
          uri: 'http://localhost:5000',
          connecting: ['[CIRCULAR]'],
          lastPing: null,
          encoding: false,
          packetBuffer: [],
          encoder: {},
          decoder: { reconstructor: null, _callbacks: { $decoded: [null] } },
          autoConnect: true,
          engine: {
            secure: false,
            agent: false,
            hostname: 'localhost',
            port: '5000',
            query: {},
            upgrade: true,
            path: '/socket.io/',
            forceJSONP: false,
            jsonp: true,
            forceBase64: false,
            enablesXDR: false,
            withCredentials: true,
            timestampParam: 't',
            transports: ['polling', 'websocket'],
            transportOptions: {},
            readyState: 'open',
            writeBuffer: [],
            prevBufferLen: 0,
            policyPort: 843,
            rememberUpgrade: false,
            binaryType: null,
            perMessageDeflate: { threshold: 1024 },
            pfx: null,
            key: null,
            passphrase: null,
            cert: null,
            ca: null,
            ciphers: null,
            rejectUnauthorized: true,
            forceNode: false,
            isReactNative: false,
            id: 'VBlso7RaLpXNUwidAAAD',
            upgrades: ['websocket'],
            pingInterval: 25000,
            pingTimeout: 5000,
            pingIntervalTimer: 10,
            pingTimeoutTimer: 17,
            transport: {
              perMessageDeflate: { threshold: 1024 },
              usingBrowserWebSocket: true,
              path: '/socket.io/',
              hostname: 'localhost',
              port: '5000',
              secure: false,
              query: {
                EIO: 3,
                transport: 'websocket',
                sid: 'VBlso7RaLpXNUwidAAAD',
              },
              timestampParam: 't',
              readyState: 'open',
              agent: false,
              socket: '[CIRCULAR]',
              enablesXDR: false,
              withCredentials: true,
              pfx: null,
              key: null,
              passphrase: null,
              cert: null,
              ca: null,
              ciphers: null,
              rejectUnauthorized: true,
              forceNode: false,
              isReactNative: false,
              _callbacks: {
                $drain: [null],
                $packet: [null],
                $error: [null],
                $close: [null],
              },
              ws: {},
              writable: true,
            },
            _callbacks: {
              $data: [null],
              $ping: [null],
              $pong: [null],
              $error: [null],
              $close: [null],
              $heartbeat: [null],
            },
            upgrading: false,
          },
          skipReconnect: false,
          _callbacks: { $open: [null], $packet: [null], $close: [null] },
        },
        nsp: '/',
        json: '[CIRCULAR]',
        ids: 1,
        acks: {},
        receiveBuffer: [],
        sendBuffer: [],
        connected: true,
        disconnected: false,
        flags: {},
        subs: [{}, {}, {}],
        _callbacks: {
          $connecting: [null],
          $connect: [null],
          '$successful-connection': [null],
          $message: [null],
          $activeUsers: [null],
          $timeOut: [null],
          $login_error: [null],
          $connect_error: [null],
          $disconnect: [null],
        },
        id: 'VBlso7RaLpXNUwidAAAD',
      },
      avatar: 'https://avatars0.githubusercontent.com/u/45799313?v=4',
      isAuthenticated: true,
    });
  });
  test('LOG_OUT reducer', () => {
    let state;
    state = joinReducer(
      {
        JoinReducer: {
          name: { name: 'sss' },
          socket: {
            io: {
              nsps: { '/': '[CIRCULAR]' },
              subs: [{}, {}, {}, {}, {}, {}],
              opts: {
                reconnection: false,
                path: '/socket.io',
                hostname: 'localhost',
                secure: false,
                port: '5000',
              },
              _reconnection: false,
              _reconnectionAttempts: null,
              _reconnectionDelay: 1000,
              _reconnectionDelayMax: 5000,
              _randomizationFactor: 0.5,
              backoff: {
                ms: 1000,
                max: 5000,
                factor: 2,
                jitter: 0.5,
                attempts: 0,
              },
              _timeout: 20000,
              readyState: 'open',
              uri: 'http://localhost:5000',
              connecting: ['[CIRCULAR]'],
              lastPing: null,
              encoding: false,
              packetBuffer: [],
              encoder: {},
              decoder: {
                reconstructor: null,
                _callbacks: { $decoded: [null] },
              },
              autoConnect: true,
              engine: {
                secure: false,
                agent: false,
                hostname: 'localhost',
                port: '5000',
                query: {},
                upgrade: true,
                path: '/socket.io/',
                forceJSONP: false,
                jsonp: true,
                forceBase64: false,
                enablesXDR: false,
                withCredentials: true,
                timestampParam: 't',
                transports: ['polling', 'websocket'],
                transportOptions: {},
                readyState: 'open',
                writeBuffer: [],
                prevBufferLen: 0,
                policyPort: 843,
                rememberUpgrade: false,
                binaryType: null,
                perMessageDeflate: { threshold: 1024 },
                pfx: null,
                key: null,
                passphrase: null,
                cert: null,
                ca: null,
                ciphers: null,
                rejectUnauthorized: true,
                forceNode: false,
                isReactNative: false,
                id: 'AJSqflSgjMLXfEHaAAAI',
                upgrades: ['websocket'],
                pingInterval: 25000,
                pingTimeout: 5000,
                pingIntervalTimer: 16,
                pingTimeoutTimer: 23,
                transport: {
                  perMessageDeflate: { threshold: 1024 },
                  usingBrowserWebSocket: true,
                  path: '/socket.io/',
                  hostname: 'localhost',
                  port: '5000',
                  secure: false,
                  query: {
                    EIO: 3,
                    transport: 'websocket',
                    sid: 'AJSqflSgjMLXfEHaAAAI',
                  },
                  timestampParam: 't',
                  readyState: 'open',
                  agent: false,
                  socket: '[CIRCULAR]',
                  enablesXDR: false,
                  withCredentials: true,
                  pfx: null,
                  key: null,
                  passphrase: null,
                  cert: null,
                  ca: null,
                  ciphers: null,
                  rejectUnauthorized: true,
                  forceNode: false,
                  isReactNative: false,
                  _callbacks: {
                    $drain: [null],
                    $packet: [null],
                    $error: [null],
                    $close: [null],
                  },
                  ws: {},
                  writable: true,
                },
                _callbacks: {
                  $data: [null],
                  $ping: [null],
                  $pong: [null],
                  $error: [null],
                  $close: [null],
                  $heartbeat: [null],
                },
                upgrading: false,
              },
              skipReconnect: false,
              _callbacks: { $open: [null], $packet: [null], $close: [null] },
            },
            nsp: '/',
            json: '[CIRCULAR]',
            ids: 1,
            acks: {},
            receiveBuffer: [],
            sendBuffer: [],
            connected: true,
            disconnected: false,
            flags: {},
            subs: [{}, {}, {}],
            _callbacks: {
              $connecting: [null],
              $connect: [null],
              '$successful-connection': [null],
              $message: [null],
              $activeUsers: [null],
              $timeOut: [null],
              $login_error: [null],
              $connect_error: [null],
              $disconnect: [null],
            },
            id: 'AJSqflSgjMLXfEHaAAAI',
          },
          users: [],
          avatar: 'https://avatars2.githubusercontent.com/u/2668?v=4',
          isAuthenticated: true,
        },
        alert: [],
        chatReducer: {
          messages: [
            {
              user: 'admin',
              text: 'sss welcome to the realtime chat ',
              avatar:
                'https://github.com/MoeTerani/Assets/blob/master/iCHAT/chat-bot.jpg?raw=true',
              time: '7:09 PM',
            },
          ],
          users: [
            {
              id: 'AJSqflSgjMLXfEHaAAAI',
              name: 'sss',
              avatar: 'https://avatars2.githubusercontent.com/u/2668?v=4',
            },
          ],
        },
      },
      { type: 'LOG_OUT' }
    );

    expect(state).toEqual({
      name: '',
      socket: null,
      users: [],
      avatar: '',
      isAuthenticated: false,
    });
  });
});
